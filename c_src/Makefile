# Based on c_src.mk from erlang.mk by Loic Hoguin <essen@ninenines.eu>

CURDIR := $(shell pwd)
BASEDIR := $(abspath $(CURDIR)/..)

PROJECT ?= $(notdir $(BASEDIR))
PROJECT := $(strip $(PROJECT))

ERTS_INCLUDE_DIR ?= $(shell erl -eval 'io:format("~s", [lists:concat([code:root_dir(), "/erts-", erlang:system_info(version), "/include"])]), halt().' -noshell)
ERL_INTERFACE_INCLUDE_DIR ?= $(shell erl -eval 'io:format("~s", [code:lib_dir(erl_interface, include)]), halt().' -noshell)
ERL_INTERFACE_LIB_DIR ?= $(shell erl -eval 'io:format("~s", [code:lib_dir(erl_interface, lib)]), halt().' -noshell)

C_SRC_DIR = $(CURDIR)
C_SRC_OUTPUT ?= $(CURDIR)/../priv/$(PROJECT).so

# Compiler settings
CC = gcc
CFLAGS = -fPIC -O2 -std=c99 -finline-functions -Wall -Wmissing-prototypes
CFLAGS += -I$(ERTS_INCLUDE_DIR) -I$(ERL_INTERFACE_INCLUDE_DIR) -I$(LMDB_LIB_DIR)

# Platform detection
UNAME_SYS := $(shell uname -s)
UNAME_ARCH := $(shell uname -m)

# Platform-specific settings
ifeq ($(UNAME_SYS), Darwin)
    # macOS settings
    LDFLAGS = -bundle -flat_namespace -undefined suppress
    # Handle both Intel and Apple Silicon
    ifeq ($(UNAME_ARCH), arm64)
        CFLAGS += -arch arm64
        LDFLAGS += -arch arm64
    else
        CFLAGS += -arch x86_64
        LDFLAGS += -arch x86_64
    endif
    # macOS specific compiler flags
    CFLAGS += -mmacosx-version-min=10.14
    # Use Homebrew paths if available
    ifneq ($(shell command -v brew 2> /dev/null),)
        BREW_PREFIX := $(shell brew --prefix)
        CFLAGS += -I$(BREW_PREFIX)/include
        LDFLAGS += -L$(BREW_PREFIX)/lib
    endif
else ifeq ($(UNAME_SYS), FreeBSD)
    LDFLAGS = -shared -fPIC
    CFLAGS += -fPIC
else ifeq ($(UNAME_SYS), OpenBSD)
    LDFLAGS = -shared -fPIC
    CFLAGS += -fPIC
else ifeq ($(UNAME_SYS), NetBSD)
    LDFLAGS = -shared -fPIC
    CFLAGS += -fPIC
else
    # Linux and other Unix-like systems
    LDFLAGS = -shared -fPIC
    CFLAGS += -fPIC
endif

# Verbosity.

c_verbose_0 = @echo " C     " $(?F);
c_verbose = $(c_verbose_$(V))

cpp_verbose_0 = @echo " CPP   " $(?F);
cpp_verbose = $(cpp_verbose_$(V))

link_verbose_0 = @echo " LD    " $(@F);
link_verbose = $(link_verbose_$(V))

SOURCES := $(shell find $(C_SRC_DIR) -type f \( -name "*.c" -o -name "*.C" -o -name "*.cc" -o -name "*.cpp" \))
OBJECTS = $(addsuffix .o, $(basename $(SOURCES)))

COMPILE_C = $(c_verbose) $(CC) $(CFLAGS) $(CPPFLAGS) -c
COMPILE_CPP = $(cpp_verbose) $(CXX) $(CXXFLAGS) $(CPPFLAGS) -c

$(C_SRC_OUTPUT): $(OBJECTS)
	@mkdir -p $(BASEDIR)/priv/
	$(link_verbose) $(CC) $(OBJECTS) $(LDFLAGS) $(LDLIBS) -o $(C_SRC_OUTPUT)

%.o: %.c
	$(COMPILE_C) $(OUTPUT_OPTION) $<

%.o: %.cc
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.C
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

%.o: %.cpp
	$(COMPILE_CPP) $(OUTPUT_OPTION) $<

clean:
	@rm -f $(C_SRC_OUTPUT) $(OBJECTS)
